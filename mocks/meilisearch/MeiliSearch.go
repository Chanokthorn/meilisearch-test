// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MeiliSearch is an autogenerated mock type for the MeiliSearch type
type MeiliSearch struct {
	mock.Mock
}

type MeiliSearch_Expecter struct {
	mock *mock.Mock
}

func (_m *MeiliSearch) EXPECT() *MeiliSearch_Expecter {
	return &MeiliSearch_Expecter{mock: &_m.Mock}
}

// AddOrUpdateDocument provides a mock function with given fields: ctx, indexName, document
func (_m *MeiliSearch) AddOrUpdateDocument(ctx context.Context, indexName string, document interface{}) (int, error) {
	ret := _m.Called(ctx, indexName, document)

	if len(ret) == 0 {
		panic("no return value specified for AddOrUpdateDocument")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (int, error)); ok {
		return rf(ctx, indexName, document)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) int); ok {
		r0 = rf(ctx, indexName, document)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, indexName, document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MeiliSearch_AddOrUpdateDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrUpdateDocument'
type MeiliSearch_AddOrUpdateDocument_Call struct {
	*mock.Call
}

// AddOrUpdateDocument is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - document interface{}
func (_e *MeiliSearch_Expecter) AddOrUpdateDocument(ctx interface{}, indexName interface{}, document interface{}) *MeiliSearch_AddOrUpdateDocument_Call {
	return &MeiliSearch_AddOrUpdateDocument_Call{Call: _e.mock.On("AddOrUpdateDocument", ctx, indexName, document)}
}

func (_c *MeiliSearch_AddOrUpdateDocument_Call) Run(run func(ctx context.Context, indexName string, document interface{})) *MeiliSearch_AddOrUpdateDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MeiliSearch_AddOrUpdateDocument_Call) Return(taskUid int, err error) *MeiliSearch_AddOrUpdateDocument_Call {
	_c.Call.Return(taskUid, err)
	return _c
}

func (_c *MeiliSearch_AddOrUpdateDocument_Call) RunAndReturn(run func(context.Context, string, interface{}) (int, error)) *MeiliSearch_AddOrUpdateDocument_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIndex provides a mock function with given fields: ctx, indexID, primaryKey
func (_m *MeiliSearch) CreateIndex(ctx context.Context, indexID string, primaryKey string) error {
	ret := _m.Called(ctx, indexID, primaryKey)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, indexID, primaryKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MeiliSearch_CreateIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIndex'
type MeiliSearch_CreateIndex_Call struct {
	*mock.Call
}

// CreateIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - indexID string
//   - primaryKey string
func (_e *MeiliSearch_Expecter) CreateIndex(ctx interface{}, indexID interface{}, primaryKey interface{}) *MeiliSearch_CreateIndex_Call {
	return &MeiliSearch_CreateIndex_Call{Call: _e.mock.On("CreateIndex", ctx, indexID, primaryKey)}
}

func (_c *MeiliSearch_CreateIndex_Call) Run(run func(ctx context.Context, indexID string, primaryKey string)) *MeiliSearch_CreateIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MeiliSearch_CreateIndex_Call) Return(_a0 error) *MeiliSearch_CreateIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MeiliSearch_CreateIndex_Call) RunAndReturn(run func(context.Context, string, string) error) *MeiliSearch_CreateIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIndex provides a mock function with given fields: ctx, indexID
func (_m *MeiliSearch) DeleteIndex(ctx context.Context, indexID string) error {
	ret := _m.Called(ctx, indexID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, indexID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MeiliSearch_DeleteIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIndex'
type MeiliSearch_DeleteIndex_Call struct {
	*mock.Call
}

// DeleteIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - indexID string
func (_e *MeiliSearch_Expecter) DeleteIndex(ctx interface{}, indexID interface{}) *MeiliSearch_DeleteIndex_Call {
	return &MeiliSearch_DeleteIndex_Call{Call: _e.mock.On("DeleteIndex", ctx, indexID)}
}

func (_c *MeiliSearch_DeleteIndex_Call) Run(run func(ctx context.Context, indexID string)) *MeiliSearch_DeleteIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MeiliSearch_DeleteIndex_Call) Return(_a0 error) *MeiliSearch_DeleteIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MeiliSearch_DeleteIndex_Call) RunAndReturn(run func(context.Context, string) error) *MeiliSearch_DeleteIndex_Call {
	_c.Call.Return(run)
	return _c
}

// WaitTaskDone provides a mock function with given fields: ctx, taskUid
func (_m *MeiliSearch) WaitTaskDone(ctx context.Context, taskUid int) error {
	ret := _m.Called(ctx, taskUid)

	if len(ret) == 0 {
		panic("no return value specified for WaitTaskDone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, taskUid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MeiliSearch_WaitTaskDone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitTaskDone'
type MeiliSearch_WaitTaskDone_Call struct {
	*mock.Call
}

// WaitTaskDone is a helper method to define mock.On call
//   - ctx context.Context
//   - taskUid int
func (_e *MeiliSearch_Expecter) WaitTaskDone(ctx interface{}, taskUid interface{}) *MeiliSearch_WaitTaskDone_Call {
	return &MeiliSearch_WaitTaskDone_Call{Call: _e.mock.On("WaitTaskDone", ctx, taskUid)}
}

func (_c *MeiliSearch_WaitTaskDone_Call) Run(run func(ctx context.Context, taskUid int)) *MeiliSearch_WaitTaskDone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MeiliSearch_WaitTaskDone_Call) Return(_a0 error) *MeiliSearch_WaitTaskDone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MeiliSearch_WaitTaskDone_Call) RunAndReturn(run func(context.Context, int) error) *MeiliSearch_WaitTaskDone_Call {
	_c.Call.Return(run)
	return _c
}

// NewMeiliSearch creates a new instance of MeiliSearch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMeiliSearch(t interface {
	mock.TestingT
	Cleanup(func())
}) *MeiliSearch {
	mock := &MeiliSearch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Worker is an autogenerated mock type for the Worker type
type Worker struct {
	mock.Mock
}

type Worker_Expecter struct {
	mock *mock.Mock
}

func (_m *Worker) EXPECT() *Worker_Expecter {
	return &Worker_Expecter{mock: &_m.Mock}
}

// Process provides a mock function with given fields: ctx, dataChan, taskIDChan, errChan
func (_m *Worker) Process(ctx context.Context, dataChan <-chan interface{}, taskIDChan chan<- int, errChan chan<- error) {
	_m.Called(ctx, dataChan, taskIDChan, errChan)
}

// Worker_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type Worker_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - ctx context.Context
//   - dataChan <-chan interface{}
//   - taskIDChan chan<- int
//   - errChan chan<- error
func (_e *Worker_Expecter) Process(ctx interface{}, dataChan interface{}, taskIDChan interface{}, errChan interface{}) *Worker_Process_Call {
	return &Worker_Process_Call{Call: _e.mock.On("Process", ctx, dataChan, taskIDChan, errChan)}
}

func (_c *Worker_Process_Call) Run(run func(ctx context.Context, dataChan <-chan interface{}, taskIDChan chan<- int, errChan chan<- error)) *Worker_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(<-chan interface{}), args[2].(chan<- int), args[3].(chan<- error))
	})
	return _c
}

func (_c *Worker_Process_Call) Return() *Worker_Process_Call {
	_c.Call.Return()
	return _c
}

func (_c *Worker_Process_Call) RunAndReturn(run func(context.Context, <-chan interface{}, chan<- int, chan<- error)) *Worker_Process_Call {
	_c.Run(run)
	return _c
}

// NewWorker creates a new instance of Worker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Worker {
	mock := &Worker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

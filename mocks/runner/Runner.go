// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"
	runner "ms-tester/runner"

	mock "github.com/stretchr/testify/mock"

	storage "ms-tester/storage"
)

// Runner is an autogenerated mock type for the Runner type
type Runner struct {
	mock.Mock
}

type Runner_Expecter struct {
	mock *mock.Mock
}

func (_m *Runner) EXPECT() *Runner_Expecter {
	return &Runner_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: ctx, loader
func (_m *Runner) Run(ctx context.Context, loader storage.StreamLoader) (int, error) {
	ret := _m.Called(ctx, loader)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.StreamLoader) (int, error)); ok {
		return rf(ctx, loader)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.StreamLoader) int); ok {
		r0 = rf(ctx, loader)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.StreamLoader) error); ok {
		r1 = rf(ctx, loader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Runner_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Runner_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - loader storage.StreamLoader
func (_e *Runner_Expecter) Run(ctx interface{}, loader interface{}) *Runner_Run_Call {
	return &Runner_Run_Call{Call: _e.mock.On("Run", ctx, loader)}
}

func (_c *Runner_Run_Call) Run(run func(ctx context.Context, loader storage.StreamLoader)) *Runner_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.StreamLoader))
	})
	return _c
}

func (_c *Runner_Run_Call) Return(finalTaskUID int, err error) *Runner_Run_Call {
	_c.Call.Return(finalTaskUID, err)
	return _c
}

func (_c *Runner_Run_Call) RunAndReturn(run func(context.Context, storage.StreamLoader) (int, error)) *Runner_Run_Call {
	_c.Call.Return(run)
	return _c
}

// SetWorker provides a mock function with given fields: worker
func (_m *Runner) SetWorker(worker runner.Worker) runner.Runner {
	ret := _m.Called(worker)

	if len(ret) == 0 {
		panic("no return value specified for SetWorker")
	}

	var r0 runner.Runner
	if rf, ok := ret.Get(0).(func(runner.Worker) runner.Runner); ok {
		r0 = rf(worker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runner.Runner)
		}
	}

	return r0
}

// Runner_SetWorker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWorker'
type Runner_SetWorker_Call struct {
	*mock.Call
}

// SetWorker is a helper method to define mock.On call
//   - worker runner.Worker
func (_e *Runner_Expecter) SetWorker(worker interface{}) *Runner_SetWorker_Call {
	return &Runner_SetWorker_Call{Call: _e.mock.On("SetWorker", worker)}
}

func (_c *Runner_SetWorker_Call) Run(run func(worker runner.Worker)) *Runner_SetWorker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runner.Worker))
	})
	return _c
}

func (_c *Runner_SetWorker_Call) Return(_a0 runner.Runner) *Runner_SetWorker_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Runner_SetWorker_Call) RunAndReturn(run func(runner.Worker) runner.Runner) *Runner_SetWorker_Call {
	_c.Call.Return(run)
	return _c
}

// SetWorkerAmount provides a mock function with given fields: workerAmount
func (_m *Runner) SetWorkerAmount(workerAmount int) runner.Runner {
	ret := _m.Called(workerAmount)

	if len(ret) == 0 {
		panic("no return value specified for SetWorkerAmount")
	}

	var r0 runner.Runner
	if rf, ok := ret.Get(0).(func(int) runner.Runner); ok {
		r0 = rf(workerAmount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runner.Runner)
		}
	}

	return r0
}

// Runner_SetWorkerAmount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWorkerAmount'
type Runner_SetWorkerAmount_Call struct {
	*mock.Call
}

// SetWorkerAmount is a helper method to define mock.On call
//   - workerAmount int
func (_e *Runner_Expecter) SetWorkerAmount(workerAmount interface{}) *Runner_SetWorkerAmount_Call {
	return &Runner_SetWorkerAmount_Call{Call: _e.mock.On("SetWorkerAmount", workerAmount)}
}

func (_c *Runner_SetWorkerAmount_Call) Run(run func(workerAmount int)) *Runner_SetWorkerAmount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Runner_SetWorkerAmount_Call) Return(_a0 runner.Runner) *Runner_SetWorkerAmount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Runner_SetWorkerAmount_Call) RunAndReturn(run func(int) runner.Runner) *Runner_SetWorkerAmount_Call {
	_c.Call.Return(run)
	return _c
}

// NewRunner creates a new instance of Runner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Runner {
	mock := &Runner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
